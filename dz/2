import os
import subprocess
from pathlib import Path

def get_git_dependencies(repo_path, branch_name):
    """
    Получает список коммитов и файлов из указанной ветки git-репозитория.
    """
    os.chdir(repo_path)
    try:
        # Получаем коммиты и их файлы
        result = subprocess.run(
            ["git", "log", branch_name, "--name-only", "--pretty=format:%H"],
            capture_output=True, text=True
        )
        return result.stdout
    except Exception as e:
        print(f"Ошибка при работе с git: {e}")
        return ""

def parse_dependencies(git_log):
    """
    Парсит git логи для создания зависимостей в формате словаря.
    """
    dependencies = {}
    current_commit = None

    for line in git_log.split("\n"):
        if line.strip():  # Пропускаем пустые строки
            if len(line.strip()) == 40:  # Если строка выглядит как SHA1 коммита
                current_commit = line.strip()
                dependencies[current_commit] = []
            elif current_commit:  # Если строка — имя файла
                dependencies[current_commit].append(line.strip())
    return dependencies


def generate_plantuml_code(dependencies):
    """
    Генерирует PlantUML код для графа зависимостей.
    """
    plantuml_code = "@startuml\n"
    plantuml_code += "title Граф зависимостей для ветки\n"

    for commit, files in dependencies.items():
        for file in set(files):  # Используем set для избежания дубликатов
            if commit != file:  # Исключаем самозависимости
                plantuml_code += f'  "{commit}" --> "{file}"\n'
    plantuml_code += "@enduml"

    return plantuml_code


def save_to_file(output_path, plantuml_code):
    """
    Сохраняет PlantUML код в файл.
    """
    with open(output_path, "w", encoding="utf-8") as file:
        file.write(plantuml_code)
    print(f"PlantUML код сохранён в: {output_path}")

def main():
    # Пути к репозиторию и файлам
    repo_path = input("Введите путь к git-репозиторию: ").strip()
    output_file = input("Введите путь для сохранения файла (например, graph.puml): ").strip()
    br

anch_name = input("Введите имя ветки для анализа: ").strip()

    # Проверка путей
    if not Path(repo_path).is_dir():
        print("Неверный путь к репозиторию.")
        return

    # Получение зависимостей
    git_log = get_git_dependencies(repo_path, branch_name)
    if not git_log:
        print("Не удалось получить логи git.")
        return

    dependencies = parse_dependencies(git_log)

    # Генерация и сохранение PlantUML
    plantuml_code = generate_plantuml_code(dependencies)
    save_to_file(output_file, plantuml_code)

if __name__ == "__main__":
    main()
    
